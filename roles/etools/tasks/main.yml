---
# tasks file for octools
- name: login to openshift
  command: oc login -u={{ username }} -p={{ pass }} --insecure-skip-tls-verify {{ ochost }}:{{ ocport }}

- name: 
  get_url:
    url: "{{ url_to_template }}"
    dest: /tmp/{{ templatename }}.conf
    mode: 0444
  when: "{{ createtemplate }}"

- name: import template into openshift
  command: oc create -f /tmp/{{ templatename }}.conf -n openshift
  ignore_errors: true
  when: "{{ createtemplate }}" 

- name: create oc project
  command: oc new-project {{ projectname }}
  
- name: copy templates complete-demo.yaml and resourcelimits for pod autoscaling
  template: 
    src: templates/{{ item }}.j2
    dest: /tmp/{{ item }}
    owner: root
    group: root
    mode: 0644 
  with_items:
    - resourcelimits.yaml
    - complete-demo.yaml
  when: "{{ esti }}"

- name: create oc project
  command: oc new-project {{ projectname }}
  when: "{{ esti }}"

- name: switch to project
  command: oc project {{ projectname }}

- name: login as admin to add user to project as admin
  command: oc login -u system:admin
  when: "{{ autoscale }}"

- name: pods need full access
  command: oc adm policy add-cluster-role-to-user cluster-admin -z {{ projectname }}

- name: pods also need to run as priviliaged containers, so grant 'priviliged' Security Context Constrains (SCC)
  command: oc adm policy add-scc-to-user privileged -z {{ projectname }}

- name: run as UID 0
  command: oc adm policy add-scc-to-user anyuid -z default

- name: create resource limits for the project
  command: oc create -f /tmp/resourcelimits.yaml -n {{ projectname }}
  when: "{{ autoscale }}"

- name: login to openshift as user {{ username }}
  command: oc login -u={{ username }} -p={{ pass }} --insecure-skip-tls-verify {{ ochost }}:{{ ocport }}
  when: "{{ esti }}"

- name: switch to project
  command: oc project {{ projectname }}
  when: "{{ esti }}"

- name: create application
  command: oc new-app {{ template }} -p APPLICATION_DOMAIN={{ apphostname }}.{{ appdomain }}
  when: "{{ quickapp }}" 

- name: create application via sti
  command: oc apply -n {{ projectname }} -f /tmp/complete-demo.yaml --context-dir={{ contextdir }} 
  when: "{{ esti }}"

- name: expose service
  command: oc expose service {{ apphostname }}
  when: "{{ esti }}"

- name: setup autoscaling
  command: oc create -f /tmp/scalar.yaml -n {{ projectname }}
  when: "{{ autoscale }}"
